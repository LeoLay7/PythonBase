# Integer тип. Сокращенно - int
integer_var = 4

# String тип. Сокращенно str
string_var = "строка stroka 123"

# Float тип.
float_var = 4.105

# Boolean тип. Сокращенно bool
boolean_var1 = True
boolean_var2 = False

# ОПЕРАЦИИ С INT
num = 9

num2 = num + 3  # сложение
num2 = num - 3  # вычитание
num2 = num * 3  # умножение
num2 = num / 3  # деление. Примечание: при делении num преобразуется в float
num3 = num // 2  # Целочисленное деление. Пример: 9//2 = 4. То есть берется часть до запятой. При этом num остается int
num3 = num % 2  # Деление с остатком. Пример: 9 % 2 = 1. То есть берется остаток от целочисленного деления.
# num3 = num - (num // 2) значит то же самое

# У float операции те же


# ФУНКЦИИ
'''
Немного теории:
Представь ситуацию, когда в твоей программе требуется сделать некоторое действие несколько раз, например 2.
Ты можешь просто написать один код 2 раза и все. А если это действие требуется сделать 100 раз? А если тебе потребуется
изменить что-то в этом действии? менять 100 раз везде код?

Для решения этой проблемы придумали функции, благодаря которым можно вынести код в отдельное место и потом вызывать
этот код при помощи названия функции.

Шаблонный код функции

def function_name(arg1, arg2, arg3...):
    <код>
    return value
    
def - слово для обозначения функции
function_name - имя функции(может быть любое)
arg1, arg2 arg3 - аргументы функции
return - слово, указывающее, что вернет функция. Но оно не обязательное
Функция, которая ничего не возвращает(написана без return) - называется процедурой
'''

# примеры функций:
def sum2(a, b):
    result = a + b
    return result

def sum3(a, b, c):
    result = a + b + c
    return result

def average_value3(a, b, c):
    average = (a + b + c) / 3
    return average


# Примеры вызова функций:
func_var1 = sum2(3, 4)
func_var2 = sum3(5, 1, 4)
func_var3 = average_value3(2, 4, 6)

# Примечание: в аргументы можно передавать переменные

num1 = 3
num2 = 5
func_var4 = sum2(num1, num2)


# Примечание: Скобочки обозначают вызов функции. без скобочек это будет просто указатель на функцию
func_var5 = sum2  # итогом будет не число, а то, что в func_var5 сохранится наша функция
func_var6 = func_var5(3, 5)  # и теперь func_var5 тоже является функцией и его можно вызвать


# Встроенные функции
'''
Еще немного теории.
В python разработчики написали самые частно используемые функции и они по умолчанию есть в вашем коде.
Такими функциями являются print(), input()
'''

print_var = "Привет, я дима"
print_var2 = "Приятно познакомится!"
print(print_var)
print(print_var, print_var2)
'''
то есть print_var здесь - аргумент. Эта функция принимает аргументы и выводит их на экран через пробел
'''

input_var = input("Введи текст: ")
int_input_var = int(input("Введи свой возраст"))
'''здесь мы передаем в качестве аргумента текст, который требуется вывести, а значение, которое будет считано
 верентся через return в качестве !!!СТРОКИ!!!. То есть если понадобится считать число, то надо будет приводить 
 строку к числовому типу int'''


# ПРИВЕДЕНИЕ ТИПОВ
'''Так как это питон, можно динамически менять типы переменных.'''

some_float_var = 4.51231
some_int_var = int(some_float_var)  # итог - в переменной лежит число 4

some_str_var = "123321"
some_int_var = int(some_str_var)  # итог - в переменной лежит число 123321, НО уже как число, а не строка

some_bool_var = True
some_int_var = int(some_bool_var)  # итог - в переменной лежит число 1, тк True == 1, False == 0



