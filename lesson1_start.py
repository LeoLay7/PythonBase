# Integer тип. Сокращенно - int
integer_var = 4

# String тип. Сокращенно str
string_var = "строка stroka 123"

# Float тип.
float_var = 4.105

# Boolean тип. Сокращенно bool
boolean_var1 = True
boolean_var2 = False

# ОПЕРАЦИИ С INT
num = 9

num2 = num + 3  # сложение
num2 = num - 3  # вычитание
num2 = num * 3  # умножение
num2 = num / 3  # деление. Примечание: при делении num преобразуется в float
num3 = num // 2  # Целочисленное деление. Пример: 9//2 = 4. То есть берется часть до запятой. При этом num остается int
num3 = num % 2  # Деление с остатком. Пример: 9 % 2 = 1. То есть берется остаток от целочисленного деления.
# num3 = num - (num // 2) значит то же самое

# У float операции те же


# ФУНКЦИИ
'''
Немного теории:
Представь ситуацию, когда в твоей программе требуется сделать некоторое действие несколько раз, например 2.
Ты можешь просто написать один код 2 раза и все. А если это действие требуется сделать 100 раз? А если тебе потребуется
изменить что-то в этом действии? менять 100 раз везде код?

Для решения этой проблемы придумали функции, благодаря которым можно вынести код в отдельное место и потом вызывать
этот код при помощи названия функции.

Шаблонный код функции

def function_name(arg1, arg2, arg3...):
    <код>
    return value

def - слово для обозначения функции
function_name - имя функции(может быть любое)
arg1, arg2 arg3 - аргументы функции
return - слово, указывающее, что вернет функция. Но оно не обязательное
Функция, которая ничего не возвращает(написана без return) - называется процедурой
'''


# примеры функций:
def sum2(a, b):
    result = a + b
    return result


def sum3(a, b, c):
    result = a + b + c
    return result


def average_value3(a, b, c):
    average = (a + b + c) / 3
    return average


# Примеры вызова функций:
func_var1 = sum2(3, 4)
func_var2 = sum3(5, 1, 4)
func_var3 = average_value3(2, 4, 6)

# Примечание: в аргументы можно передавать переменные

num1 = 3
num2 = 5
func_var4 = sum2(num1, num2)


# Примечание: Скобочки обозначают вызов функции. без скобочек это будет просто указатель на функцию
func_var5 = sum2  # итогом будет не число, а то, что в func_var5 сохранится наша функция(указатель на нее)
func_var6 = func_var5(3, 5)  # и теперь func_var5 тоже является функцией и его можно вызвать


# Встроенные функции
'''
Еще немного теории.
В python разработчики написали самые частно используемые функции и они по умолчанию есть в вашем коде.
Такими функциями являются print(), input()
'''

print_var = "Привет, я дима"
print_var2 = "Приятно познакомится!"
print(print_var)
print(print_var, print_var2)
'''
то есть print_var здесь - аргумент. Эта функция принимает аргументы и выводит их на экран через пробел
'''

input_var = input("Введи текст: ")
int_input_var = int(input("Введи свой возраст"))
'''здесь мы передаем в качестве аргумента текст, который требуется вывести, а значение, которое будет считано
 верентся через return в качестве !!!СТРОКИ!!!. То есть если понадобится считать число, то надо будет приводить 
 строку к числовому типу int'''


# ПРИВЕДЕНИЕ ТИПОВ
'''Так как это питон, можно динамически менять типы переменных.'''

some_float_var = 4.51231
some_int_var = int(some_float_var)  # итог - в переменной лежит число 4

some_str_var = "123321"
some_int_var = int(some_str_var)  # итог - в переменной лежит число 123321, НО уже как число, а не строка

some_bool_var = True
some_int_var = int(some_bool_var)  # итог - в переменной лежит число 1, тк True == 1, False == 0


# Булевые условия (алгебра логики)

'''
Важно понимать, что существуют выражения из разряда "выполняется ли это условие?", итог которых - булевое значение

Операторы:
< - меньше
> - большк

<= - меньше или равно
>= - больше или равно

== - равенство (Примечание: одно равно - это знак присваивания переменной значения, два равно - сравнение, НЕ ПУТАТЬ)
!= - неравенство

or - логическое ИЛИ
and - логическое И
not - инвертирование значения. Примечание: если not cтоит перед скобкой, внутри которой логическое выражение, то
он инвертирует все выражение в скобках. Кроме того: not num > 10 эквивалентно num <= 10. Именно меньше или !РАВНО!.
Аналогично not num >= 10 эквивалентно num < 10.
'''

# Пример:
some_num = 15
expression = some_num > 10  # Итог: some_num больше 10 и expression примет булевое значение True
expression2 = (some_num > 10) and (some_num < 20)  # Дословно: переменная больше 10 !И! меньше 10
expression3 = (some_num > 10) or (some_num == 5)  # Дословно: переменная больше 10 !ИЛИ! равна 5
expression4 = ((some_num > 10) and (some_num == 5)) or (some_num < 20)
'''
Тут поподробнее: В алгебре логики можно сказать так: порядок действий определяется, как в математике. 
and равноценно знаку умножения
or равноценно сложению

То есть: 
some_num > 10 - Итог True == 1
some_num == 5 - Итог False == 0
some_num < 20 - Итог False == 0

Как теперь выглядит выражение:
(1 * 0) + 1 --> 1   Итог выражения: True

ВАЖНО: в алгебре логики 1+1 == 1. Да вообще что угодно +1 == 1. А что угодно * 0 == 0.
Вот общая таблица алгебры логики:
1 + 1 == 1
1 + 0 == 1
1 * 1 == 1
1 * 0 == 0
0 + 0 == 0


ВАЖНО - скобки играют БОЛЬШУЮ роль в выражении. Легче всего их расставлять по математическим соображениям
Пример:
'''

some_num = 25
expression5 = some_num > 10 or some_num == 5 and some_num < 20  # 1 + 0 * 0 - Итог True
expression6 = (num > 10 or some_num == 5) and some_num < 20  # (1 + 0) * 0 - Итог False

num = 10  # или int(input())
is_less_10 = num < 10  # меньше 10
is_great_10 = num > 10  # больше 10

is_less_eq_10 = num <= 10  # меньше или равно 10
is_great_eq_10 = num >= 10  # больше или равно 10

is_eq_10 = (num == 10)  # равенство 10
is_not_eq_10 = (num != 10)  # неравенство 10

print(is_less_10, is_great_10)
print(is_less_eq_10, is_great_eq_10)
print(is_eq_10, is_not_eq_10)

expression7 = not (num < 10 and num > 20)  # принадлежит диапазону от 10 до 20. Так же это пример про примечание к not
expression8 = not num < 10 or num == 5  # число больше или равно 10 или равно 5
is_odd = (num % 2 == 0)  # проверка на то, что число четное

# А казалось бы просто скобки поставили...


'''
Офф-топ:
ОЧЕНЬ важный и полезный прикольчик в питоне - это f строки.
Прикладной пример: вот пользователь ввел тебе все свои траты за месяц и тебе надо посчитать их сумму и вывести
ему на экран в красивом виде.
Можно сделать так
'''

waste1 = 500
waste2 = 2000
waste3 = 700  # пусть он условно сделал 3 траты
total_waste = waste1 + waste2 + waste3

# Вот ура, посчитали траты человека. Теперь их надо вывести ему на экран и сообщить, сколько он потратил.
# Можно сделать так:
print(total_waste)
'''
Вроде бы вывели, но а че это за цифра? а если программа должна сообщить ему не только суммарные траты, а еще 
с десяток различных метрик и параметров, ему что ли разбираться что каждая цифра означает.
Он хочет красивый вывод, например:

За этот месяц вы потратили 5000 рублей
Как это сделать? Есть 2 способа
'''

# Первый способ
print("За этот месяц вы потратили", total_waste, "рублей")

# Второй способ
print(f"За этот месяц вы потратили {total_waste} рублей")

'''
1 способ - воспользовались аргументами функции print()
2 способ - воспользовались f строкой. 

f строка обозначается буквой f перед кавычками: f""
внутри такой строки можно напрямую вставлять значения в фигурные скобки: f"{var}"
А можно и целые выражения: f"{var1 + var2 + var3}"
'''

# Еще примеры использования f строк

pi_var = 3.1462131
print(f'pi_var: {pi_var:.2f}')  # округление до 2-х знаков запятой (именно ОКРУГЛЕНИЕ, а не обрезание до 2-х знаков)

num4 = 123
print(f'{num4:08}')  # добавить 8 нулей перед числом

x = 5
y = 6
print(f'{x} * {y} = {x * y}')  # можно вставлять и целые выражения

'''
Офф-топ: Как было до изобретения f строк? появились они сравнительно недавно, всего несколько лет назад
До этого использовали метод format, который есть абсолютно во всех языках программирования и используется с очень
давних времен. Конкретно в python он теперь почти не используется после изобретения f строк, но знать о нем полезно

Как он работает в общем: выбирается знак, который обозначает, что сюда будет должна вставиться переменная, а потом в
аргументы передавались сами переменные, которые потом подставлялись на место этих знаков

Как работает в python: Этот самый знак в python - {}, внутри которых можно указать переменную, например {var} 
'''

# Примеры
format_str = "{} {} {}".format(1, 2, 3)
format_str2 = "{val1} {val2} {val3}".format(val1=3, val2=4, val3=5)

print(format_str)
print(format_str2)


'''
В языках программирования есть такой термин, как метод. Что это?
В целом, это простая функция, но с одним важным отличием. Когда ты пишешь свою функцию, она привязана к твоему
файлу(к твоей программе), а методы - это функции, которые привязаны не к программе, а к отдельному объекту.
На примере:
var = "some text"  Здесь строка - это объект и у этого объекта есть свои функции, которые привязаны конкретно к нему
и только к нему. Пример метода приведен выше - метод format. Функция format привязана к строке и ее можно вызвать 
конкретно к ней.

Шаблон вызова метода такой:
<Шаблон>.<Имя метода>(arg1, arg2, ..., argN)

То есть вызывается точно так же, как и обычные функции, просто через точку
'''

# Примеры методов

method_str = "teeeext"

print(method_str.startswith("tee"))  # метод возвращает True, если method_str начинается со строки, переданной в
# переданной в аргумент, иначе - false

print(method_str.find('ex'))  # возвращает позицию, на которой впервые встречается переданная строка

print(method_str.capitalize())  # метод возвращает НОВУЮ строку, которая начинатся с большой буквы - Teeeext
